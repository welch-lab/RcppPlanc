// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppPlanc.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_mat_to_h5mat
CharacterVector rcpp_mat_to_h5mat(const NumericMatrix& x, const std::string& filename, const std::string& dataPath);
RcppExport SEXP _RcppPlanc_rcpp_mat_to_h5mat(SEXP xSEXP, SEXP filenameSEXP, SEXP dataPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dataPath(dataPathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mat_to_h5mat(x, filename, dataPath));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_spmat_to_h5mat
CharacterVector rcpp_spmat_to_h5mat(const NumericVector& data, const IntegerVector& rowind, const IntegerVector& colptr, unsigned int nrow, unsigned int ncol, const std::string& filename, const std::string& dataPath);
RcppExport SEXP _RcppPlanc_rcpp_spmat_to_h5mat(SEXP dataSEXP, SEXP rowindSEXP, SEXP colptrSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP filenameSEXP, SEXP dataPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colptr(colptrSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dataPath(dataPathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_spmat_to_h5mat(data, rowind, colptr, nrow, ncol, filename, dataPath));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_spmat_to_h5spmat
CharacterVector rcpp_spmat_to_h5spmat(const NumericVector& value, const IntegerVector& rowind, const IntegerVector& colptr, unsigned int nrow, unsigned int ncol, const std::string& filename, const std::string& valuePath, const std::string& rowindPath, const std::string& colptrPath);
RcppExport SEXP _RcppPlanc_rcpp_spmat_to_h5spmat(SEXP valueSEXP, SEXP rowindSEXP, SEXP colptrSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP filenameSEXP, SEXP valuePathSEXP, SEXP rowindPathSEXP, SEXP colptrPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colptr(colptrSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type valuePath(valuePathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type rowindPath(rowindPathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colptrPath(colptrPathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_spmat_to_h5spmat(value, rowind, colptr, nrow, ncol, filename, valuePath, rowindPath, colptrPath));
    return rcpp_result_gen;
END_RCPP
}
// nmf
Rcpp::List nmf(const SEXP& x, const arma::uword& k, const arma::uword& niter, const std::string& algo, const int& nCores, const Rcpp::Nullable<Rcpp::NumericMatrix>& Winit, const Rcpp::Nullable<Rcpp::NumericMatrix>& Hinit);
RcppExport SEXP _RcppPlanc_nmf(SEXP xSEXP, SEXP kSEXP, SEXP niterSEXP, SEXP algoSEXP, SEXP nCoresSEXP, SEXP WinitSEXP, SEXP HinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Hinit(HinitSEXP);
    rcpp_result_gen = Rcpp::wrap(nmf(x, k, niter, algo, nCores, Winit, Hinit));
    return rcpp_result_gen;
END_RCPP
}
// testcacheCalc
arma::uword testcacheCalc(int rank);
RcppExport SEXP _RcppPlanc_testcacheCalc(SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(testcacheCalc(rank));
    return rcpp_result_gen;
END_RCPP
}
// getBoundThreadCount
arma::uword getBoundThreadCount();
RcppExport SEXP _RcppPlanc_getBoundThreadCount() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getBoundThreadCount());
    return rcpp_result_gen;
END_RCPP
}
// openblas_pthread_off
void openblas_pthread_off(Rcpp::XPtr<void*> libloc);
RcppExport SEXP _RcppPlanc_openblas_pthread_off(SEXP liblocSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<void*> >::type libloc(liblocSEXP);
    openblas_pthread_off(libloc);
    return R_NilValue;
END_RCPP
}
// openblas_pthread_on
void openblas_pthread_on(Rcpp::XPtr<void*> libloc);
RcppExport SEXP _RcppPlanc_openblas_pthread_on(SEXP liblocSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<void*> >::type libloc(liblocSEXP);
    openblas_pthread_on(libloc);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppPlanc_rcpp_mat_to_h5mat", (DL_FUNC) &_RcppPlanc_rcpp_mat_to_h5mat, 3},
    {"_RcppPlanc_rcpp_spmat_to_h5mat", (DL_FUNC) &_RcppPlanc_rcpp_spmat_to_h5mat, 7},
    {"_RcppPlanc_rcpp_spmat_to_h5spmat", (DL_FUNC) &_RcppPlanc_rcpp_spmat_to_h5spmat, 9},
    {"_RcppPlanc_nmf", (DL_FUNC) &_RcppPlanc_nmf, 7},
    {"_RcppPlanc_testcacheCalc", (DL_FUNC) &_RcppPlanc_testcacheCalc, 1},
    {"_RcppPlanc_getBoundThreadCount", (DL_FUNC) &_RcppPlanc_getBoundThreadCount, 0},
    {"_RcppPlanc_openblas_pthread_off", (DL_FUNC) &_RcppPlanc_openblas_pthread_off, 1},
    {"_RcppPlanc_openblas_pthread_on", (DL_FUNC) &_RcppPlanc_openblas_pthread_on, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppPlanc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
