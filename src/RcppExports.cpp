// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppPlanc.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// nmf
Rcpp::List nmf(const SEXP& x, const arma::uword& k, const arma::uword& niter, const std::string& algo, const int& nCores, const Rcpp::Nullable<Rcpp::NumericMatrix>& Winit, const Rcpp::Nullable<Rcpp::NumericMatrix>& Hinit);
RcppExport SEXP _RcppPlanc_nmf(SEXP xSEXP, SEXP kSEXP, SEXP niterSEXP, SEXP algoSEXP, SEXP nCoresSEXP, SEXP WinitSEXP, SEXP HinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Hinit(HinitSEXP);
    rcpp_result_gen = Rcpp::wrap(nmf(x, k, niter, algo, nCores, Winit, Hinit));
    return rcpp_result_gen;
END_RCPP
}
// symNMF
Rcpp::List symNMF(const SEXP& x, const arma::uword& k, const arma::uword& niter, const double& lambda, const std::string& algo, const int& nCores, const Rcpp::Nullable<Rcpp::NumericMatrix>& Hinit);
RcppExport SEXP _RcppPlanc_symNMF(SEXP xSEXP, SEXP kSEXP, SEXP niterSEXP, SEXP lambdaSEXP, SEXP algoSEXP, SEXP nCoresSEXP, SEXP HinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Hinit(HinitSEXP);
    rcpp_result_gen = Rcpp::wrap(symNMF(x, k, niter, lambda, algo, nCores, Hinit));
    return rcpp_result_gen;
END_RCPP
}
// bppinmf_h5
Rcpp::List bppinmf_h5(const std::vector<std::string>& filenames, const std::vector<std::string>& dataPath, const arma::uword k, const int& nCores, const double lambda, const arma::uword niter, const bool verbose, Rcpp::Nullable<std::vector<arma::mat>> Hinit, Rcpp::Nullable<std::vector<arma::mat>> Vinit, Rcpp::Nullable<arma::mat> Winit);
RcppExport SEXP _RcppPlanc_bppinmf_h5(SEXP filenamesSEXP, SEXP dataPathSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP, SEXP HinitSEXP, SEXP VinitSEXP, SEXP WinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type dataPath(dataPathSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Hinit(HinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type Winit(WinitSEXP);
    rcpp_result_gen = Rcpp::wrap(bppinmf_h5(filenames, dataPath, k, nCores, lambda, niter, verbose, Hinit, Vinit, Winit));
    return rcpp_result_gen;
END_RCPP
}
// bppinmf_h5sp
Rcpp::List bppinmf_h5sp(std::vector<std::string> filenames, std::vector<std::string> valuePath, std::vector<std::string> rowindPath, std::vector<std::string> colptrPath, arma::uvec nrow, arma::uvec ncol, arma::uword k, const int& nCores, double lambda, arma::uword niter, bool verbose, Rcpp::Nullable<std::vector<arma::mat>> Hinit, Rcpp::Nullable<std::vector<arma::mat>> Vinit, Rcpp::Nullable<arma::mat> Winit);
RcppExport SEXP _RcppPlanc_bppinmf_h5sp(SEXP filenamesSEXP, SEXP valuePathSEXP, SEXP rowindPathSEXP, SEXP colptrPathSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP, SEXP HinitSEXP, SEXP VinitSEXP, SEXP WinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePath(valuePathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPath(rowindPathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPath(colptrPathSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Hinit(HinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type Winit(WinitSEXP);
    rcpp_result_gen = Rcpp::wrap(bppinmf_h5sp(filenames, valuePath, rowindPath, colptrPath, nrow, ncol, k, nCores, lambda, niter, verbose, Hinit, Vinit, Winit));
    return rcpp_result_gen;
END_RCPP
}
// bppinmf
Rcpp::List bppinmf(const Rcpp::List objectList, const arma::uword k, const int& nCores, const double lambda, const arma::uword niter, const bool verbose, Rcpp::Nullable<std::vector<arma::mat>> Hinit, Rcpp::Nullable<std::vector<arma::mat>> Vinit, Rcpp::Nullable<arma::mat> Winit);
RcppExport SEXP _RcppPlanc_bppinmf(SEXP objectListSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP, SEXP HinitSEXP, SEXP VinitSEXP, SEXP WinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Hinit(HinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type Winit(WinitSEXP);
    rcpp_result_gen = Rcpp::wrap(bppinmf(objectList, k, nCores, lambda, niter, verbose, Hinit, Vinit, Winit));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_h5dense
Rcpp::List onlineINMF_h5dense(std::vector<std::string> filenames, std::vector<std::string> dataPaths, arma::uword k, int nCores, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_h5dense(SEXP filenamesSEXP, SEXP dataPathsSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPaths(dataPathsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_h5dense(filenames, dataPaths, k, nCores, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_h5sparse
Rcpp::List onlineINMF_h5sparse(std::vector<std::string> filenames, std::vector<std::string> valuePaths, std::vector<std::string> rowindPaths, std::vector<std::string> colptrPaths, arma::uvec nrows, arma::uvec ncols, arma::uword k, const int& nCores, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_h5sparse(SEXP filenamesSEXP, SEXP valuePathsSEXP, SEXP rowindPathsSEXP, SEXP colptrPathsSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePaths(valuePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPaths(rowindPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPaths(colptrPathsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_h5sparse(filenames, valuePaths, rowindPaths, colptrPaths, nrows, ncols, k, nCores, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF
Rcpp::List onlineINMF(Rcpp::List objectList, arma::uword k, const int& nCores, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF(SEXP objectListSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF(objectList, k, nCores, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_withInitial
Rcpp::List onlineINMF_withInitial(Rcpp::List objectList, const std::vector<arma::mat>& Vinit, const arma::mat& Winit, const std::vector<arma::mat>& Ainit, const std::vector<arma::mat>& Binit, const Rcpp::List& objectListNew, arma::uword k, const int& nCores, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_withInitial(SEXP objectListSEXP, SEXP VinitSEXP, SEXP WinitSEXP, SEXP AinitSEXP, SEXP BinitSEXP, SEXP objectListNewSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Ainit(AinitSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Binit(BinitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type objectListNew(objectListNewSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_withInitial(objectList, Vinit, Winit, Ainit, Binit, objectListNew, k, nCores, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_project
Rcpp::List onlineINMF_project(Rcpp::List objectList, const arma::mat& Winit, const Rcpp::List& objectListNew, arma::uword k, const int& nCores, double lambda);
RcppExport SEXP _RcppPlanc_onlineINMF_project(SEXP objectListSEXP, SEXP WinitSEXP, SEXP objectListNewSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type objectListNew(objectListNewSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_project(objectList, Winit, objectListNew, k, nCores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_h5dense_withInitial
Rcpp::List onlineINMF_h5dense_withInitial(std::vector<std::string> filenames, std::vector<std::string> dataPaths, std::vector<std::string> filenamesNew, std::vector<std::string> dataPathsNew, std::vector<arma::mat> Vinit, const arma::mat& Winit, std::vector<arma::mat> Ainit, std::vector<arma::mat> Binit, arma::uword k, const int& nCores, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_h5dense_withInitial(SEXP filenamesSEXP, SEXP dataPathsSEXP, SEXP filenamesNewSEXP, SEXP dataPathsNewSEXP, SEXP VinitSEXP, SEXP WinitSEXP, SEXP AinitSEXP, SEXP BinitSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPaths(dataPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenamesNew(filenamesNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPathsNew(dataPathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Ainit(AinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Binit(BinitSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_h5dense_withInitial(filenames, dataPaths, filenamesNew, dataPathsNew, Vinit, Winit, Ainit, Binit, k, nCores, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_project_h5dense
Rcpp::List onlineINMF_project_h5dense(std::vector<std::string> filenames, std::vector<std::string> dataPaths, std::vector<std::string> filenamesNew, std::vector<std::string> dataPathsNew, const arma::mat& Winit, arma::uword k, const int& nCores, double lambda);
RcppExport SEXP _RcppPlanc_onlineINMF_project_h5dense(SEXP filenamesSEXP, SEXP dataPathsSEXP, SEXP filenamesNewSEXP, SEXP dataPathsNewSEXP, SEXP WinitSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPaths(dataPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenamesNew(filenamesNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPathsNew(dataPathsNewSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_project_h5dense(filenames, dataPaths, filenamesNew, dataPathsNew, Winit, k, nCores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_project_h5sparse
Rcpp::List onlineINMF_project_h5sparse(std::vector<std::string> filenames, std::vector<std::string> dataPaths, std::vector<std::string> valuePaths, std::vector<std::string> rowindPaths, std::vector<std::string> colptrPaths, arma::uvec nrows, arma::uvec ncols, std::vector<std::string> filenamesNew, std::vector<std::string> dataPathsNew, std::vector<std::string> valuePathsNew, std::vector<std::string> rowindPathsNew, std::vector<std::string> colptrPathsNew, arma::uvec nrowsNew, arma::uvec ncolsNew, const arma::mat& Winit, arma::uword k, const int& nCores, double lambda);
RcppExport SEXP _RcppPlanc_onlineINMF_project_h5sparse(SEXP filenamesSEXP, SEXP dataPathsSEXP, SEXP valuePathsSEXP, SEXP rowindPathsSEXP, SEXP colptrPathsSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP filenamesNewSEXP, SEXP dataPathsNewSEXP, SEXP valuePathsNewSEXP, SEXP rowindPathsNewSEXP, SEXP colptrPathsNewSEXP, SEXP nrowsNewSEXP, SEXP ncolsNewSEXP, SEXP WinitSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPaths(dataPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePaths(valuePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPaths(rowindPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPaths(colptrPathsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenamesNew(filenamesNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPathsNew(dataPathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePathsNew(valuePathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPathsNew(rowindPathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPathsNew(colptrPathsNewSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrowsNew(nrowsNewSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncolsNew(ncolsNewSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_project_h5sparse(filenames, dataPaths, valuePaths, rowindPaths, colptrPaths, nrows, ncols, filenamesNew, dataPathsNew, valuePathsNew, rowindPathsNew, colptrPathsNew, nrowsNew, ncolsNew, Winit, k, nCores, lambda));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_h5sparse_withInitial
Rcpp::List onlineINMF_h5sparse_withInitial(std::vector<std::string> filenames, std::vector<std::string> valuePaths, std::vector<std::string> rowindPaths, std::vector<std::string> colptrPaths, arma::uvec nrows, arma::uvec ncols, std::vector<std::string> filenamesNew, std::vector<std::string> valuePathsNew, std::vector<std::string> rowindPathsNew, std::vector<std::string> colptrPathsNew, arma::uvec nrowsNew, arma::uvec ncolsNew, std::vector<arma::mat> Vinit, const arma::mat& Winit, std::vector<arma::mat> Ainit, std::vector<arma::mat> Binit, arma::uword k, const int& nCores, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_h5sparse_withInitial(SEXP filenamesSEXP, SEXP valuePathsSEXP, SEXP rowindPathsSEXP, SEXP colptrPathsSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP filenamesNewSEXP, SEXP valuePathsNewSEXP, SEXP rowindPathsNewSEXP, SEXP colptrPathsNewSEXP, SEXP nrowsNewSEXP, SEXP ncolsNewSEXP, SEXP VinitSEXP, SEXP WinitSEXP, SEXP AinitSEXP, SEXP BinitSEXP, SEXP kSEXP, SEXP nCoresSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePaths(valuePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPaths(rowindPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPaths(colptrPathsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenamesNew(filenamesNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePathsNew(valuePathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPathsNew(rowindPathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPathsNew(colptrPathsNewSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrowsNew(nrowsNewSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncolsNew(ncolsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Ainit(AinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Binit(BinitSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type nCores(nCoresSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_h5sparse_withInitial(filenames, valuePaths, rowindPaths, colptrPaths, nrows, ncols, filenamesNew, valuePathsNew, rowindPathsNew, colptrPathsNew, nrowsNew, ncolsNew, Vinit, Winit, Ainit, Binit, k, nCores, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// openblas_pthread_off
void openblas_pthread_off(Rcpp::XPtr<void*> libloc);
RcppExport SEXP _RcppPlanc_openblas_pthread_off(SEXP liblocSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<void*> >::type libloc(liblocSEXP);
    openblas_pthread_off(libloc);
    return R_NilValue;
END_RCPP
}
// openblas_pthread_on
void openblas_pthread_on(Rcpp::XPtr<void*> libloc);
RcppExport SEXP _RcppPlanc_openblas_pthread_on(SEXP liblocSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<void*> >::type libloc(liblocSEXP);
    openblas_pthread_on(libloc);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppPlanc_nmf", (DL_FUNC) &_RcppPlanc_nmf, 7},
    {"_RcppPlanc_symNMF", (DL_FUNC) &_RcppPlanc_symNMF, 7},
    {"_RcppPlanc_bppinmf_h5", (DL_FUNC) &_RcppPlanc_bppinmf_h5, 10},
    {"_RcppPlanc_bppinmf_h5sp", (DL_FUNC) &_RcppPlanc_bppinmf_h5sp, 14},
    {"_RcppPlanc_bppinmf", (DL_FUNC) &_RcppPlanc_bppinmf, 9},
    {"_RcppPlanc_onlineINMF_h5dense", (DL_FUNC) &_RcppPlanc_onlineINMF_h5dense, 9},
    {"_RcppPlanc_onlineINMF_h5sparse", (DL_FUNC) &_RcppPlanc_onlineINMF_h5sparse, 13},
    {"_RcppPlanc_onlineINMF", (DL_FUNC) &_RcppPlanc_onlineINMF, 8},
    {"_RcppPlanc_onlineINMF_withInitial", (DL_FUNC) &_RcppPlanc_onlineINMF_withInitial, 13},
    {"_RcppPlanc_onlineINMF_project", (DL_FUNC) &_RcppPlanc_onlineINMF_project, 6},
    {"_RcppPlanc_onlineINMF_h5dense_withInitial", (DL_FUNC) &_RcppPlanc_onlineINMF_h5dense_withInitial, 15},
    {"_RcppPlanc_onlineINMF_project_h5dense", (DL_FUNC) &_RcppPlanc_onlineINMF_project_h5dense, 8},
    {"_RcppPlanc_onlineINMF_project_h5sparse", (DL_FUNC) &_RcppPlanc_onlineINMF_project_h5sparse, 18},
    {"_RcppPlanc_onlineINMF_h5sparse_withInitial", (DL_FUNC) &_RcppPlanc_onlineINMF_h5sparse_withInitial, 23},
    {"_RcppPlanc_openblas_pthread_off", (DL_FUNC) &_RcppPlanc_openblas_pthread_off, 1},
    {"_RcppPlanc_openblas_pthread_on", (DL_FUNC) &_RcppPlanc_openblas_pthread_on, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppPlanc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
